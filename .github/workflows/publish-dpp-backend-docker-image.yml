#################################################################################
# Catena-X - Product Passport Consumer Application
#
# Copyright (c) 2022, 2023 BASF SE, BMW AG, Henkel AG & Co. KGaA
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License, Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the
# License for the specific language govern in permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0
#################################################################################

name: "Publish Digital Product Pass Backend Docker Images"

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ "main", "feature/cmp-702/trg-4.05-migrate-images-to-dockerhub" ]

    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to use"
        required: true
        default: 'main'
        type: string

env:
  IMAGE_NAME: "digital-product-pass-backend"
  JAVA_VERSION: 19
  REGISTRY: 'ghcr.io'
  IMAGE_NAMESPACE: ${{ github.head.repo.full_name == 'eclipse-tractusx/digital-product-pass' && 'tractusx' || github.repository }}
    
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      # Build actions for GHCR registry
      - name: Docker meta for GHCR
        id: meta-for-ghcr
        if: ${{ env.IMAGE_NAMESPACE == 'catenax-ng/tx-digital-product-pass' }}
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}
            type=semver,pattern={{major}}.{{minor}}

      # Login against GHCR registry
      # https://github.com/docker/login-action
      - name: Log into GHCR registry
        if: ${{ env.IMAGE_NAMESPACE == 'catenax-ng/tx-digital-product-pass' }}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-java@v3
        with:
          java-version: '${{ env.JAVA_VERSION }}'
          distribution: 'adopt'
      
      # Build Java code with Maven
      - name:  Build dpp backend with maven for GHCR registry
        if: ${{ env.IMAGE_NAMESPACE == 'catenax-ng/tx-digital-product-pass' }}
        run: |
          cd consumer-backend/productpass
          mvn -B clean install
        
      # Build and push Docker image with Buildx
      # https://github.com/docker/build-push-action
      - name: Build and push backend for GHCR registry
        id: build-and-push-backend-ghcr
        if: ${{ env.IMAGE_NAMESPACE == 'catenax-ng/tx-digital-product-pass' }}
        uses: docker/build-push-action@v3
        with:
          context: consumer-backend/productpass
          push: true
          tags: ${{ steps.meta.outputs.tags }}, ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest
          labels: ${{ steps.meta.outputs.labels }}

      # Build actions for docker hub registry
      - name: Docker meta for Docker Hub
        id: meta-for-dockerhub
        if: ${{ env.IMAGE_NAMESPACE == 'tractusx' }}
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}
            type=semver,pattern={{major}}.{{minor}}

      # Login against docker registry
      # https://github.com/docker/login-action
      - name: Log into a Docker registry
        if: ${{ env.IMAGE_NAMESPACE == 'tractusx' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - uses: actions/setup-java@v3
        with:
          java-version: '${{ env.JAVA_VERSION }}'
          distribution: 'adopt'
      
      # Build Java code with Maven
      - name:  Build dpp backend with maven for Docker Hub
        run: |
          cd consumer-backend/productpass
          mvn -B clean install

      # Build and push Docker image with Buildx
      # https://github.com/docker/build-push-action
      - name: Build and push backend for Docker Hub
        id: build-and-push-backend-dockerhub
        if: ${{ env.IMAGE_NAMESPACE == 'tractusx' }}
        uses: docker/build-push-action@v3
        with:
          context: consumer-backend/productpass
          push: true
          tags: ${{ steps.meta.outputs.tags }}, ${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}:latest
          labels: ${{ steps.meta.outputs.labels }}

      # https://github.com/peter-evans/dockerhub-description
      # Important step to push image description to DockerHub 
      - name: Update Docker Hub description
        if: ${{ env.IMAGE_NAMESPACE == 'tractusx' }}
        uses: peter-evans/dockerhub-description@v3
        with:
        # readme-filepath defaults to toplevel README.md, Only necessary if you have a dedicated file with your 'Notice for docker images'   
        # readme-filepath: path/to/dedicated/notice-for-docker-image.md 
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          repository: ${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}
