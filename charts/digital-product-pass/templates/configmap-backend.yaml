#################################################################################
# Tractus-X - Digital Product Pass Application 
#
# Copyright (c) 2022, 2024 BMW AG
# Copyright (c) 2022, 2024 Henkel AG & Co. KGaA
# Copyright (c) 2023, 2024 CGI Deutschland B.V. & Co. KG
# Copyright (c) 2023, 2024 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License, Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the
# License for the specific language govern in permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0
#################################################################################

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-backend-config
  namespace: {{ .Values.namespace }}
data:
  application.yaml: |-
    spring:
      name: "Digital Product Passport Consumer Backend"
      main:
        allow-bean-definition-overriding: true
      devtools:
        add-properties: false
      jackson:
        serialization:
          indent_output: true
    logging:
      level:
        # -- general logging level
        root: {{ tpl (.Values.backend.logging.level.root | default "INFO") . | quote }}
        # -- logging for the util components
        utils: {{ tpl (.Values.backend.logging.level.utils | default "INFO") . | quote }}
    
    configuration:
      # -- max retries for the backend services
      maxRetries: {{ .Values.backend.maxRetries }}
      # -- keycloak configuration
      keycloak:
        realm: {{ .Values.oauth.realm }}
        resource: {{ .Values.oauth.appId }}
        tokenUri: "https://{{ tpl (.Values.oauth.hostname | default "http://localhost") .  }}/auth/realms/{{ .Values.oauth.realm }}/protocol/openid-connect/token"
        userInfoUri: "https://{{ tpl (.Values.oauth.hostname | default "http://localhost") .  }}/auth/realms/{{ .Values.oauth.realm }}/protocol/openid-connect/userinfo"
      # -- edc consumer connection configuration
      edc:
        endpoint: "https://{{ .Values.backend.edc.hostname }}"
        readiness: {{ .Values.backend.edc.apis.readiness }}
        management: {{ .Values.backend.edc.apis.management }}
        catalog: {{ .Values.backend.edc.apis.catalog }}
        negotiation: {{ .Values.backend.edc.apis.negotiation }}
        transfer: {{ .Values.backend.edc.apis.transfer }}
        receiverEndpoint: "https://{{ .Values.backend.hostname }}/endpoint"
        delay:  {{ .Values.backend.edc.delay }} # -- Negotiation status Delay in milliseconds in between async requests [<= 500]
        authorizationKey: {{ .Values.backend.edc.authorizationKey }}
      # -- security configuration
      security:
        # -- authorization configuration about bpn and role checks
        authorization: 
          bpnAuth: {{ .Values.oauth.bpnCheck.enabled }}
          roleAuth: {{ .Values.oauth.roleCheck.enabled }}
        # -- checkups done in the startup  
        startUpChecks:
          bpnCheck: {{ .Values.backend.securityCheck.bpn }}
          edcCheck: {{ .Values.backend.securityCheck.edc }}
        authentication:
          header: {{ .Values.oauth.apiKey.header }}
      # -- irs configuration
      irs:
        enabled: {{ .Values.backend.irs.enabled }} # -- Enable search for children in the requests
        endpoint: "https://{{ .Values.backend.irs.hostname }}" # -- IRS endpoint
        paths:
          job: "/irs/jobs" # -- API path for calling in the IRS endpoints and staring/getting jobs
        tree:
          fileName: "treeDataModel" # -- Tree dataModel filename created in the processId directory
          indent: true # -- Indent tree file
        callbackUrl: "https://{{ .Values.backend.hostname }}/api/irs" # -- Backend call back base url for the irs controller
      # -- digital twin registry configuration
      dtr:
        # -- asset type to search for the registry in the edc
        assetType: 'data.core.digitalTwinRegistry'
        # -- submodel endpoint interface to search
        endpointInterface: 'SUBMODEL-3.0'
        # -- dsp endpoint key inside submodel body
        dspEndpointKey: 'dspEndpoint'
        # -- decentral digital twin apis
        decentralApis:
          search: {{ .Values.backend.digitalTwinRegistry.endpoints.search }}
          digitalTwin: {{ .Values.backend.digitalTwinRegistry.endpoints.digitalTwin }}
          subModel: {{ .Values.backend.digitalTwinRegistry.endpoints.subModel }}
        # -- timeouts for the digital twin registry async negotiation
        timeouts:
          search: {{ .Values.backend.digitalTwinRegistry.timeouts.search }}
          negotiation: {{ .Values.backend.digitalTwinRegistry.timeouts.negotiation }}
          transfer: {{ .Values.backend.digitalTwinRegistry.timeouts.transfer }}
          digitalTwin: {{ .Values.backend.digitalTwinRegistry.timeouts.digitalTwin }}
        # -- temporary storage of dDTRs for optimization
        temporaryStorage:
          enabled: {{ .Values.backend.digitalTwinRegistry.temporaryStorage.enabled }}
          lifetime: {{ .Values.backend.digitalTwinRegistry.temporaryStorage.lifetime }}
        # -- policy configuration for the digital twin registries negotiation
        policyCheck:
          enabled: {{ .Values.backend.digitalTwinRegistry.policyCheck.enabled }}
          strictMode: {{ .Values.backend.digitalTwinRegistry.policyCheck.strictMode }}
          policies: {{- toYaml .Values.backend.digitalTwinRegistry.policyCheck.policies | nindent 10 }}
      # -- discovery configuration
      discovery:
        # -- discovery finder configuration
        endpoint: "https://{{ tpl (.Values.backend.discovery.hostname | default "") . }}/api/v1.0/administration/connectors/discovery/search"
        # -- bpn discovery configuration
        bpn:
          key: {{ tpl (.Values.backend.discovery.bpnDiscovery.key | default "manufacturerPartId") . | quote }}
          searchPath: {{ tpl (.Values.backend.discovery.bpnDiscovery.path | default "") . | quote }}
        # -- edc discovery configuration
        edc:
          key: {{ tpl (.Values.backend.discovery.edcDiscovery.key | default "bpn") . | quote }}
      # -- configuration to the single API endpoint
      single-api:
        maxRetries: {{ .Values.backend.singleApi.maxRetries }}
        delay: {{ .Values.backend.singleApi.delay }}
      # -- process configuration
      process:
        # -- directory for storing the contract negotiation files
        dir: "process"
        # -- indent the process negotiation files
        indent: true
        # -- unique sha512 hash key used for the passport encryption
        signKey: {{ tpl (.Values.backend.process.encryptionKey | default "") . | quote }}
      # -- passport data transfer configuration
      passport:
        # -- configure the data transfer
        dataTransfer:
          # -- encrypt the passport when he arrives from the edc data plane
          encrypt: true
          # -- the indent from the passport
          indent: true
          # -- directory to store the passport when is not linked to a process
          dir: "data/transfer"
        # -- passport versions and aspects allowed
        aspects: {{- toYaml .Values.backend.passport.aspects | nindent 10 }}
        # -- policy configuration for passport retrieval (for auto-signing only)
        policyCheck:
          enabled: {{ .Values.backend.passport.policyCheck.enabled }}
          strictMode: {{ .Values.backend.passport.policyCheck.strictMode }}
          policies: {{- toYaml .Values.backend.passport.policyCheck.policies | nindent 10 }}
        # -- digital product pass verification add-on configuration
      verification:
        enabled: {{ .Values.backend.verification.enabled }}
        autoVerify: {{ .Values.backend.verification.autoVerify }}
        wallet:
          url: {{ .Values.backend.verification.wallet.url }}
          endpoints:
            health: {{ .Values.backend.verification.wallet.endpoints.health }}
            verify: {{ .Values.backend.verification.wallet.endpoints.verify }}
        certifiedDataCredential:
          ## -- These keys are used in order to find if a subModel contains a verifiable credential, defined in the verification documentation
          semanticIdKeys:
            - key: "Entity"
              value: "https://www.w3.org/ns/credentials/v2"
            - key: "DataElement"
              value: "urn:samm:io.catenax.dpp_verification.cdc:1.0.0#CertifiedDataCredential"
            - key: "Operation"
              value: "https://w3c.github.io/vc-jws-2020/contexts/v1/"
    # -- configuration of the spring boot server
    server:
      # -- configuration of backend errors
      error:
        include-message: ALWAYS
        include-binding-errors: ALWAYS
        include-stacktrace: ON_PARAM
        include-exception: false
      # -- listening port for the backend
      port: {{ .Values.backend.serverPort }}
      # -- maximum allowed connections
      tomcat:
        max-connections: 10000
