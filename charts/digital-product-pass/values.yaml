#################################################################################
# Tractus-X - Digital Product Pass Application
#
# Copyright (c) 2022, 2024 BMW AG
# Copyright (c) 2022, 2024 Henkel AG & Co. KGaA
# Copyright (c) 2023, 2024 CGI Deutschland B.V. & Co. KG
# Copyright (c) 2023, 2024 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License, Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the
# License for the specific language govern in permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0
#################################################################################

# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

name: "digital-product-pass"
replicaCount: 1
namespace: ""
nameOverride: ""
fullnameOverride: ""

# -- Backend configuration
backend:
  name: "dpp-backend"
  image:
    repository: docker.io/tractusx/digital-product-pass-backend
    pullPolicy: IfNotPresent
  # -- Existing image pull secret to use to [obtain the container image from private registries](https://kubernetes.io/docs/concepts/containers/images/#using-a-private-registry)
  imagePullSecrets: []

  service:
    # -- [Service type](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types) to expose the running application on a set of Pods as a network service
    type: ClusterIP
    port: 8888

  # -- ingress declaration to expose the dpp-backend service
  ingress:
    enabled: false
    annotations:
      # -- ingress class name
      ingressClassName: nginx
      # kubernetes.io/tls-acme: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-passthrough: "false"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    hosts:
      - host: &hostname ""
        paths:
          - path: /
            pathType: Prefix

  # -- The [pod security context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod) defines privilege and access control settings for a Pod within the deployment
  podSecurityContext:
    seccompProfile:
      # -- Restrict a Container's Syscalls with seccomp
      type: RuntimeDefault
    # -- Runs all processes within a pod with a special uid
    runAsUser: 10000
    # -- Processes within a pod will belong to this guid
    runAsGroup: 10001
    # -- The owner for volumes and any files created within volumes will belong to this guid
    fsGroup: 10001

  # The [container security context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container) defines privilege and access control settings for a Container within a pod
  securityContext:
    capabilities:
      # -- Specifies which capabilities to drop to reduce syscall attack surface
      drop:
        - ALL
      # -- Specifies which capabilities to add to issue specialized syscalls
      add: []
    # -- Whether the root filesystem is mounted in read-only mode
    readOnlyRootFilesystem: true
    # -- Controls [Privilege Escalation](https://kubernetes.io/docs/concepts/security/pod-security-policy/#privilege-escalation) enabling setuid binaries changing the effective user ID
    allowPrivilegeEscalation: false
    # -- Requires the container to run without root privileges
    runAsNonRoot: true
    # -- The container's process will run with the specified uid
    runAsUser: 10000
    # -- The owner for volumes and any files created within volumes will belong to this guid
    runAsGroup: 10001

  # -- specifies the volume mounts for the backend deployment
  volumeMounts:
    # -- mounted path for the backend configuration added in the config maps
    - name: backend-config
      mountPath: /app/config
    # -- contains the location for the process data directory
    - name: pvc-backend
      mountPath: /app/data/process
      subPath: data/process
    # -- contains the log directory uses by the backend
    - name: tmpfs
      mountPath: /app/log
      subPath: log
    # -- container tmp directory
    - name: tmpfs
      mountPath: /tmp
    # -- contains the vault configuration for the backend
    - name: tmpfs
      mountPath: /app/data/VaultConfig
      subPath: VaultConfig/vault.token.yml
    # -- contains the temporary directory used by the backend
    - name: tmpfs
      mountPath: /app/tmp

  # -- volume claims for the containers
  volumes:
    # -- persist the backend configuration
    - name: backend-config
      configMap:
        name: "{{ .Release.Name }}-backend-config"
    # -- persist the backend data directories
    - name: pvc-backend
      persistentVolumeClaim:
        claimName: "{{ .Release.Name }}-pvc-data"
    # -- temporary file system mount
    - name: tmpfs
      emptyDir: {}

  # -- in this section we configure the values that are inserted as secrets in the backend
  edc:
    # -- the secret for assesing the edc management API
    xApiKey: "<Add API key here>"
    authorizationKey: "X-Api-Key"
    # -- BPN Number
    participantId: &bpn "<Add participant id here>"
    # -- edc consumer connection configuration
    hostname: ""
    apis:
      readiness: "/api/check/readiness"
      management: "/management/v2"
      catalog: "/catalog/request"
      negotiation: "/contractnegotiations"
      transfer: "/transferprocesses"
    # -- Negotiation status Delay in milliseconds in between async requests [<= 500]
    delay: 100

  # -- backend hostname (without protocol prefix [DEFAULT HTTPS] for security )
  hostname: *hostname
  # -- configuration of the spring boot server
  serverPort: 8888

  logging:
    level:
      # -- general logging level
      root: INFO
      # -- logging for the util components
      utils: INFO

  # -- Provide your custom configuration here (this overrides the DPP backend spring application.yaml)
  # -- max retries for the backend services
  maxRetries: 5

  # -- security configuration
  securityCheck:
    bpn: false
    edc: false

  # -- irs configuration
  irs:
    enabled: false
    hostname: ""
    apiKey: "<Add API Key>"

  # -- digital twin registry configuration
  process:
    # -- unique sha512 hash key used for the passport encryption
    encryptionKey: ""

  verification:
    enabled: true
    autoVerify: true
    wallet:
      url: "https://<dpp-consumer-wallet.url>"
      apiKey: "<Add API Key>"
      endpoints:
        health: "/health"
        verify: "/verify"

  passport:
    aspects:
      - urn:samm:io.catenax.battery.battery_pass:6.0.0#BatteryPass
      - urn:samm:io.catenax.transmission.transmission_pass:3.0.0#TransmissionPass
      - urn:samm:io.catenax.generic.digital_product_passport:5.0.0#DigitalProductPassport

    # -- configuration for policies to filter in the digital product pass asset negotiation
    policyCheck:
      # -- condition to enable and disable the policy check
      enabled: true
      # -- the strict mode is quicker (uses hashes) and requires less computation complexity, the default mode is comparing against every single object value
      strictMode: false
      # -- list of allowed policies that can be selected from the edc catalog in negotiations
      policies:
        - permission:
            - action: "USE"
              logicalConstraint: "odrl:and"
              constraints:
                - leftOperand: "cx-policy:Membership"
                  operator: "odrl:eq"
                  rightOperand: "active"
                - leftOperand: "cx-policy:FrameworkAgreement"
                  operator: "odrl:eq"
                  rightOperand: "CircularEconomy:1.0"
                - leftOperand: "cx-policy:UsagePurpose"
                  operator: "odrl:eq"
                  rightOperand: "cx.circular.dpp:1"
          prohibition: []
          obligation: []

  digitalTwinRegistry:
    endpoints:
      search: "/lookup/shells"
      digitalTwin: "/shell-descriptors"
      subModel: "/submodel-descriptors"
    # -- timeouts for the digital twin registry async negotiation
    timeouts:
      search: 50
      negotiation: 60
      transfer: 20
      digitalTwin: 40
    # -- temporary storage of dDTRs for optimization
    temporaryStorage:
      enabled: true
      # -- lifetime of the temporaryStorage in hours
      lifetime: 12
    # -- policy configuration for the digital twin assets in the edc catalog
    policyCheck:
      # -- condition to enable and disable the policy check
      enabled: true
      # -- the strict mode is quicker (uses hashes) and requires less computation complexity, the default mode is comparing against every single object value
      strictMode: false
      # -- list of allowed policies that can be selected from the edc catalog in negotiations
      policies:
        - permission:
            - action: "USE"
              logicalConstraint: "odrl:and"
              constraints:
                - leftOperand: "cx-policy:Membership"
                  operator: "odrl:eq"
                  rightOperand: "active"
                - leftOperand: "cx-policy:UsagePurpose"
                  operator: "odrl:eq"
                  rightOperand: "cx.core.digitalTwinRegistry:1"
          prohibition: []
          obligation: []
  # -- discovery configuration
  discovery:
    # -- discovery finder configuration
    hostname: ""
    # -- bpn discovery configuration
    bpnDiscovery:
      key: "manufacturerPartId"
      path: "/api/v1.0/administration/connectors/bpnDiscovery/search"
    # -- edc discovery configuration
    edcDiscovery:
      key: "bpn"
  # -- configuration to the single API endpoint
  singleApi:
    maxRetries: 30
    delay: 1000

frontend:
  enabled: true
  name: "dpp-frontend"
  image:
    repository: docker.io/tractusx/digital-product-pass-frontend
    pullPolicy: IfNotPresent
  # -- Existing image pull secret to use to [obtain the container image from private registries](https://kubernetes.io/docs/concepts/containers/images/#using-a-private-registry)
  imagePullSecrets: []

  service:
    # -- [Service type](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types) to expose the running application on a set of Pods as a network service
    type: ClusterIP
    port: 8080

  # -- ingress declaration to expose the dpp-frontend service
  ingress:
    enabled: false
    annotations:
      # -- ingress class name
      ingressClassName: nginx
      # kubernetes.io/tls-acme: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-passthrough: "false"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    hosts: []

  # -- The [pod security context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod) defines privilege and access control settings for a Pod within the deployment
  podSecurityContext:
    seccompProfile:
      # -- Restrict a Container's Syscalls with seccomp
      type: RuntimeDefault
    # -- Runs all processes within a pod with a special uid
    runAsUser: 10000
    # -- Processes within a pod will belong to this guid
    runAsGroup: 10001
    # -- The owner for volumes and any files created within volumes will belong to this guide
    fsGroup: 10001

  # The [container security context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container) defines privilege and access control settings for a Container within a pod
  securityContext:
    capabilities:
      # -- Specifies which capabilities to drop to reduce syscall attack surface
      drop:
        - ALL
      # -- Specifies which capabilities to add to issue specialized syscalls
      add: []
    # -- Whether the root filesystem is mounted in read-only mode
    readOnlyRootFilesystem: false
    # -- Controls [Privilege Escalation](https://kubernetes.io/docs/concepts/security/pod-security-policy/#privilege-escalation) enabling setuid binaries changing the effective user ID
    allowPrivilegeEscalation: false
    # -- Requires the container to run without root privileges
    runAsNonRoot: true
    # -- The container's process will run with the specified uid
    runAsUser: 10000
    # -- The owner for volumes and any files created within volumes will belong to this guid
    runAsGroup: 10001

  # -- product passport UI configuration

  # -- url of the digital product pass backend service
  backend:
    hostname: ""

  supportContact:
    adminEmail: "admin@example.com"

  portal:
    hostname: ""

  negotiation:
    autoSign: true

  # -- api timeouts
  api:
    # -- max retries for getting status
    max_retries: 30
    # -- default timeout  - 90 seconds in milliseconds
    timeout:
      negotiate: 60000
      search: 60000
      decline: 20000
    # -- delay from getting status
    delay: 1000

  # -- irs api timeouts
  irs:
    # -- request timeout delay
    requestDelay: 30000
    # -- maximum waiting time to get the irs job status
    maxWaitingTime: 30

# -- oauth configuration
oauth:
  # -- url of the identity provider service
  hostname: ""
  # -- technical user keycloak central id credentials
  # -- note: this credentials need to have access to the Discovery Finder, BPN Discovery and EDC Discovery
  techUser:
    clientId: "<Add client id here>"
    clientSecret: "<Add client secret here>"
  realm: "<realm>"
  appId: "<app-id>"
  onLoad: "login-required"
  # -- configure here the bpn check for the application
  bpnCheck:
    enabled: false
    # -- this bpn needs to be included in the user login information when the check is enabled
    bpn: *bpn
  # -- the role check checks if the user has access roles for the appId
  roleCheck:
    enabled: false

  # -- to authenticate against single API
  apiKey:
    header: "X-Api-Key"
    secret: "<api-key>"

# Following Catena-X Helm Best Practices @url: https://catenax-ng.github.io/docs/kubernetes-basics/helm
# @url: https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-resource-requests-and-limits
resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 250m
    memory: 512Mi

livenessProbe:
  enabled: false
  path: /health
  port: 8888
  initialDelaySeconds: 60       # trigger initial readinessProbe after 60 seconds
  periodSeconds: 300            # check readinessProbe after every 5 minutes

readinessProbe:
  enabled: false
  path: /health
  port: 8888
  initialDelaySeconds: 60       # trigger initial readinessProbe after 60 seconds
  periodSeconds: 300            # check readinessProbe after every 5 minutes

# [node selector](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector) to constrain pods to nodes
nodeSelector: {}

# [tolerations](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) to configure preferred nodes
tolerations: []

# [affinity](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity) to configure which nodes the pods can be scheduled on
affinity: {}
